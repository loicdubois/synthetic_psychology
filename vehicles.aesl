<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="4" name="LED_LOW"/>
<constant value="32" name="LED_MAX"/>
<constant value="500" name="MOTOR_MAX"/>
<constant value="0" name="VEHICLE_INDEX_MIN"/>
<constant value="5" name="VEHICLE_INDEX_MAX"/>
<constant value="3" name="VEHICLE3_SPEED_TEMPERATURE_DIVIDER"/>
<constant value="4" name="VEHICLE3_SPEED_MIC_DIVIDER"/>
<constant value="10" name="VEHICLE4_MIC_THRESHOLD"/>
<constant value="15" name="VEHICLE4_PROX_THRESHOLD"/>
<constant value="3" name="VEHICLE4_SPEED_MIC_DIVIDER"/>
<constant value="10" name="VEHICLE4_SPEED_MIC_OFFSET"/>
<constant value="250" name="VEHICLE5_RANGE_TEMPERATURE_MIN"/>
<constant value="350" name="VEHICLE5_RANGE_TEMPERATURE_MAX"/>
<constant value="5000" name="VEHICLE5_TIMER_PERIOD_MS"/>
<constant value="1000" name="VEHICLE5_ACTIVATION_DURATION_MS"/>
<constant value="300" name="VEHICLE5_TEMPERATURE_REFERENCE"/>
<constant value="-250" name="VEHICLE5_SPEED_MIN"/>
<constant value="250" name="VEHICLE5_SPEED_MAX"/>
<constant value="5" name="VEHICLE5_LOOP_COUNTS"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">############ Constant arrays ############
var _proxHorizontalDirection[7] = [1,1,1,1,1,-1,-1]
var _vehicle2And3SpeedSets[10] = [0, 500, 150, 350, 250, 250, 350, 150, 500, 0] # 5 pairs of left/right (or inversely) speeds

############ Variables ############
var i
var argmax
var dummyVariable

var proxHorizontalMaxHundredth = 0
var proxHorizontal[7]
var proxHorizontalArrayTmp[7]
var proxHorizontalTmp

# Vehicle/behavior variables
var vehicleIndex = 0
var lastVehicleIndex = -1

var vehicle1EnableBidirectional
var vehicle1BidirectionalProxHorizontalDirection
var vehicle1Speed
var vehicle1To3ProxHorizontalNormHundredth
var vehicle2FearEnabled
var vehicle2And3Direction
var vehicle3ExplorationEnabled
var vehicle3MultiSensorEnabled
var vehicle3SpeedMic
var vehicle3SpeedTemperature
var vehicle4SpeedMic
var vehicle5DoMotion
var vehicle5LoopCounter
var vehicle5ProxGroundMean

############ Functions ############
sub init
	callsub resetLeds
	mic.threshold = 1 # event on every temperature measurement
	timer.period[0] = 0 # disable timer 0
	timer.period[1] = 0 # disable timer 0
	
	proxHorizontalMaxHundredth = 0
	
	vehicleIndex = 0
	lastVehicleIndex = -1
	vehicle1EnableBidirectional = 0
	vehicle2FearEnabled = 0
	vehicle3ExplorationEnabled = 0
	vehicle3MultiSensorEnabled = 0
	vehicle5DoMotion = 0
	vehicle5LoopCounter = 0
	
	motor.left.target = 0
	motor.right.target = 0
	
sub resetLeds
	call leds.top(0, 0, 0)
	call leds.bottom.right(0, 0, 0)
	call leds.bottom.left(0, 0, 0)
	call leds.circle(0,0,0,0,0,0,0,0)
	
	call leds.rc(0)
	call leds.sound(0)
	call leds.temperature(0,0)

sub processProxHorizontal
	vehicle1To3ProxHorizontalNormHundredth = 0
	vehicle1BidirectionalProxHorizontalDirection = 0
	vehicle2And3Direction = -1
	
	# Get max value ever measured
	call math.mul(proxHorizontalArrayTmp, _proxHorizontalDirection, proxHorizontal)
	call math.stat(proxHorizontalArrayTmp, dummyVariable, proxHorizontalTmp, dummyVariable)
	if (proxHorizontalTmp/100 > proxHorizontalMaxHundredth) then
		proxHorizontalMaxHundredth = proxHorizontalTmp/100
	end

	# Get max value for the current event
	if  ((vehicleIndex == 1) and (vehicle1EnableBidirectional == 0)) or ((vehicleIndex >= 2) and (vehicleIndex &lt;= 4)) then
		for i in 0:6 do
			if (_proxHorizontalDirection[i] > 0) then
				proxHorizontalTmp = _proxHorizontalDirection[i]*proxHorizontal[i]/100
				# Maximum value for vehicle 1, direction for vehicle 2 and above
				if (proxHorizontalTmp > vehicle1To3ProxHorizontalNormHundredth) then
					vehicle1To3ProxHorizontalNormHundredth = proxHorizontalTmp
					vehicle1BidirectionalProxHorizontalDirection = _proxHorizontalDirection[i] # always 1
					vehicle2And3Direction = i
				end
			end
		end
	elseif ((vehicleIndex == 1) and (vehicle1EnableBidirectional == 1)) then
		call math.mul(proxHorizontalArrayTmp, _proxHorizontalDirection, proxHorizontal)
		call math.stat(proxHorizontalArrayTmp, dummyVariable, proxHorizontalTmp, dummyVariable)
		call math.argbounds(proxHorizontalArrayTmp, dummyVariable, argmax)
		vehicle1To3ProxHorizontalNormHundredth = proxHorizontalTmp/100
		vehicle1BidirectionalProxHorizontalDirection = _proxHorizontalDirection[argmax]
	end

# Vehicle 1, getting around
sub vehicle1
	# Compute commands
	if (proxHorizontalMaxHundredth > 0) then
	    vehicle1Speed = (MOTOR_MAX*vehicle1To3ProxHorizontalNormHundredth/proxHorizontalMaxHundredth)*vehicle1BidirectionalProxHorizontalDirection	
	else
	    vehicle1Speed = 0
	end
	
	motor.left.target = vehicle1Speed
	motor.right.target = vehicle1Speed

	# Visual feedback
	call leds.top(LED_MAX, LED_MAX, 0)
	call leds.bottom.right(LED_MAX, LED_MAX, 0)
	call leds.bottom.left(LED_MAX, LED_MAX, 0)
	if (vehicle1Speed != 0) then
		call leds.circle(LED_MAX,0,0,0,LED_MAX*vehicle1EnableBidirectional,0,0,0)
	else
		call leds.circle(LED_LOW,0,0,0,LED_LOW*vehicle1EnableBidirectional,0,0,0)
	end
	
# Vehicle 2, fear and agression
sub vehicle2
	# Get correct set of speeds
	if (vehicle2And3Direction >= 0) and (vehicle2And3Direction &lt;=4)  then
		if (vehicle2FearEnabled == 0) then # agression
			motor.left.target = _vehicle2And3SpeedSets[2*vehicle2And3Direction]*vehicle1To3ProxHorizontalNormHundredth/proxHorizontalMaxHundredth
			motor.right.target = _vehicle2And3SpeedSets[2*vehicle2And3Direction+1]*vehicle1To3ProxHorizontalNormHundredth/proxHorizontalMaxHundredth
		else # fear
			motor.left.target = _vehicle2And3SpeedSets[2*vehicle2And3Direction+1]*vehicle1To3ProxHorizontalNormHundredth/proxHorizontalMaxHundredth
			motor.right.target = _vehicle2And3SpeedSets[2*vehicle2And3Direction]*vehicle1To3ProxHorizontalNormHundredth/proxHorizontalMaxHundredth
		end
	else
		motor.left.target = 0
		motor.right.target = 0
	end
	
	# Visual feedback
	call leds.top(LED_MAX, LED_MAX/2, 0)
	call leds.bottom.right(LED_MAX, LED_MAX/2, 0)
	call leds.bottom.left(LED_MAX, LED_MAX/2, 0)
	call leds.circle(LED_MAX*(1-vehicle2FearEnabled),0,0,0,LED_MAX*vehicle2FearEnabled,0,0,0)
	
# Vehicle 3, love
sub vehicle3
	# Get correct set of speeds
	if (vehicle2And3Direction >= 0) and (vehicle2And3Direction &lt;=4)  then
		if (vehicle3ExplorationEnabled == 0) then # love
			motor.left.target = _vehicle2And3SpeedSets[2*vehicle2And3Direction]*(proxHorizontalMaxHundredth-vehicle1To3ProxHorizontalNormHundredth)/proxHorizontalMaxHundredth
			motor.right.target = _vehicle2And3SpeedSets[2*vehicle2And3Direction+1]*(proxHorizontalMaxHundredth-vehicle1To3ProxHorizontalNormHundredth)/proxHorizontalMaxHundredth
		else # exploration
			motor.left.target = _vehicle2And3SpeedSets[2*vehicle2And3Direction+1]*(proxHorizontalMaxHundredth-vehicle1To3ProxHorizontalNormHundredth)/proxHorizontalMaxHundredth
			motor.right.target = _vehicle2And3SpeedSets[2*vehicle2And3Direction]*(proxHorizontalMaxHundredth-vehicle1To3ProxHorizontalNormHundredth)/proxHorizontalMaxHundredth
		end		
	else
		motor.left.target = 0
		motor.right.target = 0
	end
	
	# Vehicle 3c
	if (vehicle3MultiSensorEnabled == 1) then
		motor.left.target = motor.left.target + vehicle3SpeedMic + vehicle3SpeedTemperature
		motor.right.target = motor.right.target - vehicle3SpeedMic + vehicle3SpeedTemperature
	end
	
	# Visual feedback
	call leds.top(LED_MAX, 0, 0)
	call leds.bottom.right(LED_MAX, 0, 0)
	call leds.bottom.left(LED_MAX, 0, 0)
	call leds.circle(LED_MAX*(1-vehicle3ExplorationEnabled),LED_MAX*vehicle3ExplorationEnabled,LED_MAX*vehicle3MultiSensorEnabled,0,LED_MAX*vehicle3MultiSensorEnabled,0,LED_MAX*vehicle3MultiSensorEnabled,LED_MAX*vehicle3ExplorationEnabled)

# Vehicle 4, values and special tastes
sub vehicle4
	if (vehicle2And3Direction >= 0) and (vehicle2And3Direction &lt;=4) then
		# aggression/love depending on threshold
		if (vehicle1To3ProxHorizontalNormHundredth &lt; VEHICLE4_PROX_THRESHOLD) then
			motor.left.target = 		_vehicle2And3SpeedSets[2*vehicle2And3Direction]*vehicle1To3ProxHorizontalNormHundredth/proxHorizontalMaxHundredth
			motor.right.target = _vehicle2And3SpeedSets[2*vehicle2And3Direction+1]*vehicle1To3ProxHorizontalNormHundredth/proxHorizontalMaxHundredth
		else
			motor.left.target = _vehicle2And3SpeedSets[2*vehicle2And3Direction]*(proxHorizontalMaxHundredth-vehicle1To3ProxHorizontalNormHundredth)/proxHorizontalMaxHundredth
			motor.right.target = _vehicle2And3SpeedSets[2*vehicle2And3Direction+1]*(proxHorizontalMaxHundredth-vehicle1To3ProxHorizontalNormHundredth)/proxHorizontalMaxHundredth
		end
	else
		motor.left.target = 0
		motor.right.target = 0		
	end
	
	# Rotation based on sound
	motor.left.target = motor.left.target + vehicle4SpeedMic
	motor.right.target = motor.right.target - vehicle4SpeedMic
	
	# Visual feedback
	call leds.top(LED_MAX, 0, LED_MAX/2)
	call leds.bottom.right(LED_MAX, 0, LED_MAX/2)
	call leds.bottom.left(LED_MAX, 0, LED_MAX/2)
	
# Vehicle 5, logic
sub vehicle5
	# Temperature range
	if (temperature > VEHICLE5_RANGE_TEMPERATURE_MIN) and (temperature &lt; VEHICLE5_RANGE_TEMPERATURE_MAX) then
		if (vehicle5DoMotion == 1) then
			# Rotation speed based on ground reflectivity
			call math.stat(prox.ground.delta, dummyVariable, dummyVariable,vehicle5ProxGroundMean)
			call math.min(motor.left.target, VEHICLE5_SPEED_MIN+vehicle5ProxGroundMean, VEHICLE5_SPEED_MAX)
			motor.right.target = VEHICLE5_SPEED_MIN
			
			if  (vehicle5LoopCounter == VEHICLE5_LOOP_COUNTS) then # flip direction
				motor.right.target = motor.left.target
				motor.left.target = VEHICLE5_SPEED_MIN
			end
		else
			motor.left.target = 0
			motor.right.target = 0
		end
	else
		motor.left.target = 0
		motor.right.target = 0
	end
	
	# Visual feedback
	call leds.top(LED_MAX, 0, LED_MAX)
	call leds.bottom.right(LED_MAX, 0, LED_MAX)
	call leds.bottom.left(LED_MAX, 0, LED_MAX)

############ Events ############
# Main event
onevent prox
	call math.mul(proxHorizontal, prox.horizontal, _proxHorizontalDirection)
	callsub processProxHorizontal
	
	# Behavior selection
	if (vehicleIndex == 0) then
		motor.left.target = 0
		motor.right.target = 0
	elseif (vehicleIndex == 1) then
		callsub vehicle1
	elseif (vehicleIndex == 2) then
		callsub vehicle2
	elseif (vehicleIndex == 3) then
		callsub vehicle3
	elseif (vehicleIndex == 4) then
		callsub vehicle4
	elseif (vehicleIndex == 5) then
		callsub vehicle5
		timer.period[0] = VEHICLE5_TIMER_PERIOD_MS
	end
	
	if (lastVehicleIndex != vehicleIndex) then
		lastVehicleIndex = vehicleIndex
		callsub resetLeds
	end

onevent mic
	if (vehicle3MultiSensorEnabled == 1) then
		vehicle3SpeedMic = mic.intensity/VEHICLE3_SPEED_MIC_DIVIDER
	else
		vehicle3SpeedMic = 0
	end
	
	if  (mic.intensity > VEHICLE4_MIC_THRESHOLD) then
		vehicle4SpeedMic = VEHICLE4_SPEED_MIC_OFFSET + mic.intensity/VEHICLE4_SPEED_MIC_DIVIDER
	else
		vehicle4SpeedMic = 0
	end
	
onevent temperature
	if (vehicle3MultiSensorEnabled == 1) then
		vehicle3SpeedTemperature = temperature/VEHICLE3_SPEED_TEMPERATURE_DIVIDER
	else
		vehicle3SpeedTemperature = 0
	end
	
onevent timer0
	timer.period[0] = VEHICLE5_TIMER_PERIOD_MS*temperature/VEHICLE5_TEMPERATURE_REFERENCE
	timer.period[1] = VEHICLE5_ACTIVATION_DURATION_MS
	vehicle5DoMotion = 1
	vehicle5LoopCounter = vehicle5LoopCounter+1
	if  (vehicle5LoopCounter > VEHICLE5_LOOP_COUNTS) then
		vehicle5LoopCounter = 1
	end

onevent timer1
	vehicle5DoMotion = 0

# Buttons events, for vehicle selection
onevent button.center
	callsub init

onevent button.right
	if (button.right == 1) then # on press
		call math.min(vehicleIndex, vehicleIndex+1, VEHICLE_INDEX_MAX)
	end
	
onevent button.left
	if (button.left == 1) then # on press
		call math.max(vehicleIndex, vehicleIndex-1, VEHICLE_INDEX_MIN)
	end
	
onevent button.backward
	if (button.backward == 1) then # on press
		if  (vehicleIndex == 1) then
			vehicle1EnableBidirectional = 1
		elseif  (vehicleIndex == 2) then
			vehicle2FearEnabled = 1
		elseif  (vehicleIndex == 3) then
			if  (vehicle3ExplorationEnabled == 0) and (vehicle3MultiSensorEnabled == 0) then
				vehicle3ExplorationEnabled = 1
			elseif (vehicle3ExplorationEnabled == 1) then
				vehicle3ExplorationEnabled = 0
				vehicle3MultiSensorEnabled = 1
			elseif  (vehicle3MultiSensorEnabled == 1) then
				vehicle3MultiSensorEnabled = 0
			end
		end
	end

onevent button.forward
	if (button.forward == 1) then # on press
		if  (vehicleIndex == 1) then
			vehicle1EnableBidirectional = 0
		elseif  (vehicleIndex == 2) then
			vehicle2FearEnabled = 0
		elseif  (vehicleIndex == 3) then
			if  (vehicle3ExplorationEnabled == 0) and (vehicle3MultiSensorEnabled == 0) then
				vehicle3MultiSensorEnabled = 1
			elseif (vehicle3MultiSensorEnabled == 1) then
				vehicle3ExplorationEnabled = 1
				vehicle3MultiSensorEnabled = 0
			elseif  (vehicle3ExplorationEnabled == 1) then
				vehicle3ExplorationEnabled = 0
			end
		end
	end
</node>


</network>
