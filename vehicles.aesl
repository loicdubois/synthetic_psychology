<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="32767" name="INT16_MAX"/>
<constant value="4" name="LED_LOW"/>
<constant value="32" name="LED_MAX"/>
<constant value="0" name="VEHICLE_INDEX_MIN"/>
<constant value="1" name="VEHICLE_INDEX_MAX"/>
<constant value="500" name="VEHICLE1_SPEED_MULTIPLIER"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II"># Constant array
var proxHorizontalDirection[7] = [1,1,1,1,1,-1,-1]
var proxHorizontalWeightVehicle1[7] = [2,2,2,2,2,-10,-10]

# Variables
var i = 0

var proxHorizontalMaxHundredth = 0
var proxHorizontal[7]
var proxHorizontalTmp

# Vehicle/behavior variables
var vehicleIndex = 0
var vehicle1ProxHorizontalNormHundredth
var vehicle1EnableBidirectional
var vehicle1BidirectionalProxHorizontalDirection
var vehicle1Speed

# Functions
sub init
	call leds.top(0, 0, 0)
	call leds.bottom.right(0, 0, 0)
	call leds.bottom.left(0, 0, 0)
	call leds.circle(0,0,0,0,0,0,0,0)
	
	call leds.rc(0)
	call leds.sound(0)
	call leds.temperature(0,0)
	
	proxHorizontalMaxHundredth = 0
	
	vehicleIndex = 0
	vehicle1ProxHorizontalNormHundredth = 0
	vehicle1EnableBidirectional = 0
	vehicle1BidirectionalProxHorizontalDirection = 0
	
	motor.left.target = 0
	motor.right.target = 0	
	

sub processProxHorizontal
	vehicle1ProxHorizontalNormHundredth = 0
	for i in 0:6 do
		# Get max bounds
		proxHorizontalTmp = proxHorizontalDirection[i]*proxHorizontal[i]/100
		if (proxHorizontalTmp > proxHorizontalMaxHundredth) then
			proxHorizontalMaxHundredth = proxHorizontalTmp
		end
		
		# Maximum value for vehicle 1
		if (proxHorizontalTmp > vehicle1ProxHorizontalNormHundredth) then
			if  (vehicle1EnableBidirectional == 0) and (proxHorizontalDirection[i] > 0) then
				vehicle1ProxHorizontalNormHundredth = proxHorizontalTmp
				vehicle1BidirectionalProxHorizontalDirection = proxHorizontalDirection[i] # always 1
			elseif (vehicle1EnableBidirectional == 1) then
				vehicle1ProxHorizontalNormHundredth = proxHorizontalTmp
				vehicle1BidirectionalProxHorizontalDirection = proxHorizontalDirection[i]
			end
		end
	end

sub vehicle1
	# Compute commands
	if (proxHorizontalMaxHundredth > 0) then
	    vehicle1Speed = (VEHICLE1_SPEED_MULTIPLIER*vehicle1ProxHorizontalNormHundredth/proxHorizontalMaxHundredth)*vehicle1BidirectionalProxHorizontalDirection	
	else
	    vehicle1Speed = 0
	end
	
	motor.left.target = vehicle1Speed
	motor.right.target = vehicle1Speed

	# Visual feedback
	call leds.top(INT16_MAX, INT16_MAX, 0)
	call leds.bottom.right(INT16_MAX, INT16_MAX, 0)
	call leds.bottom.left(INT16_MAX, INT16_MAX, 0)
	if (vehicle1Speed != 0) then
		call leds.circle(LED_MAX,0,0,0,LED_MAX*vehicle1EnableBidirectional,0,0,0)
	else
		call leds.circle(LED_LOW,0,0,0,LED_LOW*vehicle1EnableBidirectional,0,0,0)
	end

# Behavioral events
onevent prox
	call math.mul(proxHorizontal, prox.horizontal, proxHorizontalDirection)
	callsub processProxHorizontal
	
	if (vehicleIndex == 1) then
		callsub vehicle1
	end

# Buttons events
onevent button.center
	callsub init

onevent button.right
	call math.min(vehicleIndex, vehicleIndex+1, VEHICLE_INDEX_MAX)
	
onevent button.left
	call math.max(vehicleIndex, vehicleIndex-1, VEHICLE_INDEX_MIN)
	
onevent button.backward
	if  (vehicleIndex == 1) then
		vehicle1EnableBidirectional = 1
	end
	
onevent button.forward
	if  (vehicleIndex == 1) then
		vehicle1EnableBidirectional = 0
	end
</node>


</network>
